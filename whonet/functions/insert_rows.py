from whonet.models import *
import pandas as pd
from django.utils.datastructures import MultiValueDictKeyError
from datetime import datetime
import os
from django.db import IntegrityError




def import_metadata(row_iter):
    for index, row in row_iter:
        epidata =  EpiMetaData.objects.update_or_create(
        sample_id=row['Sample id'],
        defaults={
                    'sample_id': row['Sample id'],
                    'alternative_sample_id': row['Alternative sample id'],
                    'ghru_uuid': row['GHRU UUID'],
                    'species': row['Species'],
                    'wgs_id': row['WGS_ID'],
                    'wgs_qc': row['WGS_QC'],
                    'country': row['Country'],
                    'country_alpha_2_code': row['Country alpha-2 Code'],
                    'region_province_department': row['Region/Province/Department'],
                    'iso_3166_2_subdivision_code': row['ISO 3166-2 subdivision code'],
                    'location': row['Location'],
                    'sentinel_site_code': row['Sentinel Site Code'],
                    'latitude': row['Latitude'],
                    'longitude': row['Longitude'],
                    'collected_by': row['Collected by'],
                    'collection_contact': row['Collection Contact'],
                    'collection_date': row['Collection date'],
                    'year': row['Year'],
                    'month': row['Month'],
                    'day': row['Day'],
                    'outbreak_isolate': row['Outbreak isolate'],
                    'clinical_significance': row['Clinical significance'],
                    'host': row['Host'],
                    'specimen_type': row['Specimen type'],
                    'invasive': row['Invasive'],
                    'patient_type': row['Patient type'],
                    'ward_inpatients_only': row['Ward (Inpatients Only)'],
                    'room_inpatients_only': row['Room (Inpatients Only)'],
                    'address_outpatients_only': row['Address (Outpatients only)'],
                    'address_latitude_outpatients_only': row['Address Latitude (Outpatients only)'],
                    'address_longitude_outpatients_only': row['Address Longitude (Outpatients only)'],
                    'origin': row['Origin'],
                    'hai_type': row['HAI Type'],
                    'patient_date_of_birth': row['Patient Date of Birth'],
                    'patient_age': row['Patient age'],
                    'patient_gender': row['Patient gender'],
                    'clinical_diagnosis': row['Clinical Diagnosis'],
                    'submitted_as': row['Submitted as'],
                    'species': row['Species'],
                    'instrument': row['Instrument'],
                    'card_code': row['Card Code'],
                    'ast_profile': row['AST profile'],
                    'abx_amc': row['AMC'],
                    'abx_amk': row['AMK'],
                    'abx_amp': row['AMP'],
                    'abx_atm': row['ATM'],
                    'abx_azm': row['AZM'],
                    'abx_caz': row['CAZ'],
                    'abx_cec': row['CEC'],
                    'abx_cep': row['CEP'],
                    'abx_cfm': row['CFM'],
                    'abx_chl': row['CHL'],
                    'abx_cip': row['CIP'],
                    'abx_cli': row['CLI'],
                    'abx_col': row['COL'],
                    'abx_cro': row['CRO'],
                    'abx_csl': row['CSL'],
                    'abx_ctx': row['CTX'],
                    'abx_cxa': row['CXA'],
                    'abx_cxm': row['CXM'],
                    'abx_czo': row['CZO'],
                    'abx_dap': row['DAP'],
                    'abx_dor': row['DOR'],
                    'abx_enr': row['ENR'],
                    'abx_ery': row['ERY'],
                    'abx_etp': row['ETP'],
                    'abx_fep': row['FEP'],
                    'abx_fox': row['FOX'],
                    'abx_gen': row['GEN'],
                    'abx_ipm': row['IPM'],
                    'abx_lnz': row['LNZ'],
                    'abx_lvx': row['LVX'],
                    'abx_mem': row['MEM'],
                    'abx_met': row['MET'],
                    'abx_mfx': row['MFX'],
                    'abx_nal': row['NAL'],
                    'abx_nit': row['NIT'],
                    'abx_nor': row['NOR'],
                    'abx_ofx': row['OFX'],
                    'abx_oxa': row['OXA'],
                    'abx_pen': row['PEN'],
                    'abx_pip': row['PIP'],
                    'abx_rif': row['RIF'],
                    'abx_sam': row['SAM'],
                    'abx_spt': row['SPT'],
                    'abx_str': row['STR'],
                    'abx_sxt': row['SXT'],
                    'abx_tcc': row['TCC'],
                    'abx_tcy': row['TCY'],
                    'abx_tec': row['TEC'],
                    'abx_tgc': row['TGC'],
                    'abx_tic': row['TIC'],
                    'abx_tob': row['TOB'],
                    'abx_tzd': row['TZD'],
                    'abx_tzp': row['TZP'],
                    'abx_van': row['VAN'],
                    'abx_xnl': row['XNL'],
                    'icr': row['ICR'],
                    'abx_amc_mic': row['AMC MIC'],
                    'abx_amk_mic': row['AMK MIC'],
                    'abx_amp_mic': row['AMP MIC'],
                    'abx_atm_mic': row['ATM MIC'],
                    'abx_azm_mic': row['AZM MIC'],
                    'abx_caz_mic': row['CAZ MIC'],
                    'abx_cec_mic': row['CEC MIC'],
                    'abx_cep_mic': row['CEP MIC'],
                    'abx_cfm_mic': row['CFM MIC'],
                    'abx_chl_mic': row['CHL MIC'],
                    'abx_cip_mic': row['CIP MIC'],
                    'abx_cli_mic': row['CLI MIC'],
                    'abx_col_mic': row['COL MIC'],
                    'abx_cro_mic': row['CRO MIC'],
                    'abx_csl_mic': row['CSL MIC'],
                    'abx_ctx_mic': row['CTX MIC'],
                    'abx_cxa_mic': row['CXA MIC'],
                    'abx_cxm_mic': row['CXM MIC'],
                    'abx_czo_mic': row['CZO MIC'],
                    'abx_dap_mic': row['DAP MIC'],
                    'abx_dor_mic': row['DOR MIC'],
                    'abx_enr_mic': row['ENR MIC'],
                    'abx_ery_mic': row['ERY MIC'],
                    'abx_etp_mic': row['ETP MIC'],
                    'abx_fep_mic': row['FEP MIC'],
                    'abx_fox_mic': row['FOX MIC'],
                    'abx_gen_mic': row['GEN MIC'],
                    'abx_ipm_mic': row['IPM MIC'],
                    'abx_lnz_mic': row['LNZ MIC'],
                    'abx_lvx_mic': row['LVX MIC'],
                    'abx_mem_mic': row['MEM MIC'],
                    'abx_met_mic': row['MET MIC'],
                    'abx_mfx_mic': row['MFX MIC'],
                    'abx_nal_mic': row['NAL MIC'],
                    'abx_nit_mic': row['NIT MIC'],
                    'abx_nor_mic': row['NOR MIC'],
                    'abx_ofx_mic': row['OFX MIC'],
                    'abx_oxa_mic': row['OXA MIC'],
                    'abx_pen_mic': row['PEN MIC'],
                    'abx_pip_mic': row['PIP MIC'],
                    'abx_rif_mic': row['RIF MIC'],
                    'abx_sam_mic': row['SAM MIC'],
                    'abx_spt_mic': row['SPT MIC'],
                    'abx_str_mic': row['STR MIC'],
                    'abx_sxt_mic': row['SXT MIC'],
                    'abx_tcc_mic': row['TCC MIC'],
                    'abx_tcy_mic': row['TCY MIC'],
                    'abx_tec_mic': row['TEC MIC'],
                    'abx_tgc_mic': row['TGC MIC'],
                    'abx_tic_mic': row['TIC MIC'],
                    'abx_tob_mic': row['TOB MIC'],
                    'abx_tzd_mic': row['TZD MIC'],
                    'abx_tzp_mic': row['TZP MIC'],
                    'abx_van_mic': row['VAN MIC'],
                    'abx_xnl_mic': row['XNL MIC'],
                },
        )

def import_qualifyr(row_iter):
    for index, row in row_iter:
        qualifyr =  RetroQualifyr.objects.update_or_create(
        sample_name=row['sample_name'],
        defaults={
            'sample_name': row['sample_name'],
            'result': row['result'],
            'bactinspector_result_metric_value': row['bactinspector.result.metric_value'],
            'bactinspector_result_check_result': row['bactinspector.result.check_result'],
            'bactinspector_species_metric_value': row['bactinspector.species.metric_value'],
            'bactinspector_species_check_result': row['bactinspector.species.check_result'],
            'confindr_contam_status_metric_value': row['confindr.contam_status.metric_value'],
            'confindr_contam_status_check_result': row['confindr.contam_status.check_result'],
            'confindr_percentage_contamination_metric_value': row['confindr.percentage_contamination.metric_value'],
            'confindr_percentage_contamination_check_result': row['confindr.percentage_contamination.check_result'],
            'fastqc_1_adapter_content_metric_value': row['fastqc 1.Adapter Content.metric_value'],
            'fastqc_1_adapter_content_check_result': row['fastqc 1.Adapter Content.check_result'],
            'fastqc_1_basic_statistics_metric_value': row['fastqc 1.Basic Statistics.metric_value'],
            'fastqc_1_basic_statistics_check_result': row['fastqc 1.Basic Statistics.check_result'],
            'fastqc_1_overrepresented_sequences_metric_value': row['fastqc 1.Overrepresented sequences.metric_value'],
            'fastqc_1_overrepresented_sequences_check_result': row['fastqc 1.Overrepresented sequences.check_result'],
            'fastqc_1_per_base_n_content_metric_value': row['fastqc 1.Per base N content.metric_value'],
            'fastqc_1_per_base_n_content_check_result': row['fastqc 1.Per base N content.check_result'],
            'fastqc_1_per_base_sequence_quality_metric_value': row['fastqc 1.Per base sequence quality.metric_value'],
            'fastqc_1_per_base_sequence_quality_check_result': row['fastqc 1.Per base sequence quality.check_result'],
            'fastqc_1_per_sequence_gc_content_metric_value': row['fastqc 1.Per sequence GC content.metric_value'],
            'fastqc_1_per_sequence_gc_content_check_result': row['fastqc 1.Per sequence GC content.check_result'],
            'fastqc_1_per_sequence_quality_scores_metric_value': row['fastqc 1.Per sequence quality scores.metric_value'],
            'fastqc_1_per_sequence_quality_scores_check_result': row['fastqc 1.Per sequence quality scores.check_result'],
            'fastqc_1_sequence_duplication_levels_metric_value': row['fastqc 1.Sequence Duplication Levels.metric_value'],
            'fastqc_1_sequence_duplication_levels_check_result': row['fastqc 1.Sequence Duplication Levels.check_result'],
            'fastqc_1_sequence_length_distribution_metric_value': row['fastqc 1.Sequence Length Distribution.metric_value'],
            'fastqc_1_sequence_length_distribution_check_result': row['fastqc 1.Sequence Length Distribution.check_result'],
            'fastqc_2_adapter_content_metric_value': row['fastqc 2.Adapter Content.metric_value'],
            'fastqc_2_adapter_content_check_result': row['fastqc 2.Adapter Content.check_result'],
            'fastqc_2_basic_statistics_metric_value': row['fastqc 2.Basic Statistics.metric_value'],
            'fastqc_2_basic_statistics_check_result': row['fastqc 2.Basic Statistics.check_result'],
            'fastqc_2_overrepresented_sequences_metric_value': row['fastqc 2.Overrepresented sequences.metric_value'],
            'fastqc_2_overrepresented_sequences_check_result': row['fastqc 2.Overrepresented sequences.check_result'],
            'fastqc_2_per_base_n_content_metric_value': row['fastqc 2.Per base N content.metric_value'],
            'fastqc_2_per_base_n_content_check_result': row['fastqc 2.Per base N content.check_result'],
            'fastqc_2_per_base_sequence_quality_metric_value': row['fastqc 2.Per base sequence quality.metric_value'],
            'fastqc_2_per_base_sequence_quality_check_result': row['fastqc 2.Per base sequence quality.check_result'],
            'fastqc_2_per_sequence_gc_content_metric_value': row['fastqc 2.Per sequence GC content.metric_value'],
            'fastqc_2_per_sequence_gc_content_check_result': row['fastqc 2.Per sequence GC content.check_result'],
            'fastqc_2_per_sequence_quality_scores_metric_value': row['fastqc 2.Per sequence quality scores.metric_value'],
            'fastqc_2_per_sequence_quality_scores_check_result': row['fastqc 2.Per sequence quality scores.check_result'],
            'fastqc_2_sequence_duplication_levels_metric_value': row['fastqc 2.Sequence Duplication Levels.metric_value'],
            'fastqc_2_sequence_duplication_levels_check_result': row['fastqc 2.Sequence Duplication Levels.check_result'],
            'fastqc_2_sequence_length_distribution_metric_value': row['fastqc 2.Sequence Length Distribution.metric_value'],
            'fastqc_2_sequence_length_distribution_check_result': row['fastqc 2.Sequence Length Distribution.check_result'],
            'file_size_check_size_metric_value': row['file_size_check.size.metric_value'],
            'file_size_check_size_check_result': row['file_size_check.size.check_result'],
            'quast_contigs_1000_bp_metric_value': row['quast.# contigs (>= 1000 bp).metric_value'],
            'quast_contigs_1000_bp_check_result': row['quast.# contigs (>= 1000 bp).check_result'],
            'quast_n50_metric_value': row['quast.N50.metric_value'],
            'quast_n50_check_result': row['quast.N50.check_result'],
            'quast_total_length_1000_bp_metric_value': row['quast.Total length (>= 1000 bp).metric_value'],
            'quast_total_length_1000_bp_check_result': row['quast.Total length (>= 1000 bp).check_result'],
        })


def import_mlst_salmonella(row_iter):
    for index, row in row_iter:
        mlst =  MlstSalmonella.objects.update_or_create(
        sample_id=row['Sample ID'],
        defaults={
            'sample_id': row['Sample ID'],
            'sequence_type': row['ST'],
            'hkg_aroc': row['aroC'],
            'hkg_dnan': row['dnaN'],
            'hkg_hemd': row['hemD'],
            'hkg_hisd': row['hisD'],
            'hkg_pure': row['purE'],
            'hkg_suca': row['sucA'],
            'hkg_thra': row['thrA'],
         
        })